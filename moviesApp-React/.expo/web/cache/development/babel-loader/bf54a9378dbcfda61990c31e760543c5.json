{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport createDataContext from \"./createDataContecxt\";\nimport omdb from \"../api/omdb\";\nimport axios from 'axios';\nvar url = 'http://www.omdbapi.com/?apikey=a091d52e';\nvar movieReducer = function movieReducer(state, action) {\n  switch (action.type) {\n    case 'get_blogposts':\n      return action.payload;\n    case 'delete_blogpost':\n      return state.filter(function (blogPost) {\n        return blogPost.id !== action.payload;\n      });\n    case 'edit_blogpost':\n      return state.map(function (blogPost) {\n        return blogPost.id === action.payload.id ? action.payload : blogPost;\n      });\n    default:\n      return state;\n  }\n};\nvar getMovies = function getMovies(dispatch) {\n  return function () {\n    var _ref = _asyncToGenerator(function* (title) {\n      var response = yield axios.get(url + \"&s=\" + title);\n      dispatch({\n        type: 'get_blogposts',\n        payload: response.data.Search\n      });\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nvar addMovie = function addMovie(dispatch) {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (id, content, callback) {\n      dispatch({\n        type: 'add_blogpost',\n        payload: {\n          id: id,\n          content: content\n        }\n      });\n    });\n    return function (_x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nvar _createDataContext = createDataContext(movieReducer, {\n    getMovies: getMovies,\n    addMovie: addMovie\n  }, []),\n  Context = _createDataContext.Context,\n  Provider = _createDataContext.Provider;\nexport { Context, Provider };","map":{"version":3,"names":["createDataContext","omdb","axios","url","movieReducer","state","action","type","payload","filter","blogPost","id","map","getMovies","dispatch","title","response","get","data","Search","addMovie","content","callback","Context","Provider"],"sources":["C:/Users/User/Documents/Internship/Training/React Native/moviesApp-React/src/context/movieContext.js"],"sourcesContent":["import createDataContext from './createDataContecxt';\r\nimport omdb from '../api/omdb';\r\nimport axios from 'axios';\r\nconst url =  'http://www.omdbapi.com/?apikey=a091d52e';\r\n\r\nconst movieReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'get_blogposts':\r\n      return action.payload;\r\n    // case 'add_blogpost':\r\n    //   return [\r\n    //     ...state, \r\n    //     {\r\n    //         id: Math.floor(Math.random() * 99999) , \r\n    //         title: action.payload.title,\r\n    //         content: action.payload.content\r\n    //     }];\r\n    case 'delete_blogpost':\r\n      return state.filter(blogPost => blogPost.id !== action.payload);\r\n    case 'edit_blogpost':\r\n      return state.map((blogPost) =>{\r\n        return blogPost.id === action.payload.id ? action.payload : blogPost;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst getMovies = dispatch => {\r\n  return async (title) => {\r\n    const response =  await axios.get(`${url}&s=${title}`);\r\n    //response.data \r\n    // console.log(response.data.Search);\r\n    dispatch({type: 'get_blogposts', payload: response.data.Search})\r\n  }\r\n}\r\n\r\nconst addMovie = dispatch => {\r\n    return async (id, content, callback) =>{\r\n      // await jsonServer.post('/blogposts', {title: title, content: content});\r\n      \r\n        dispatch({ type: 'add_blogpost', payload: {id:id, content: content}});\r\n        // if(callback){\r\n        //   callback();\r\n        // }\r\n    };\r\n    \r\n  };\r\n\r\n// const deleteBlogPost = dispatch => {\r\n//     return async(id) => {\r\n//       await jsonServer.delete(`/blogposts/${id}`)\r\n//         dispatch({type: 'delete_blogpost', payload: id})\r\n//     }\r\n// }\r\n\r\n// const editBlogPost = dispatch => {\r\n//   return async (id, title, content, callback) =>{\r\n//     await jsonServer.put(`/blogposts/${id}`, {title, content})\r\n//     dispatch({\r\n//       type: 'edit_blogpost', \r\n//       payload: {id: id, title: title, content: content}});\r\n//       if(callback){\r\n//         callback();\r\n//       }\r\n//   }\r\n// }\r\n\r\n  export const {Context, Provider} = createDataContext(\r\n    movieReducer, \r\n    {getMovies,addMovie}, \r\n    // {getMovies,addBlogPost, deleteBlogPost, editBlogPost}, \r\n    []\r\n    );"],"mappings":";AAAA,OAAOA,iBAAiB;AACxB,OAAOC,IAAI;AACX,OAAOC,KAAK,MAAM,OAAO;AACzB,IAAMC,GAAG,GAAI,yCAAyC;AAEtD,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAEC,MAAM,EAAK;EACtC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB,OAAOD,MAAM,CAACE,OAAO;IASvB,KAAK,iBAAiB;MACpB,OAAOH,KAAK,CAACI,MAAM,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO;MAAA,EAAC;IACjE,KAAK,eAAe;MAClB,OAAOH,KAAK,CAACO,GAAG,CAAC,UAACF,QAAQ,EAAI;QAC5B,OAAOA,QAAQ,CAACC,EAAE,KAAKL,MAAM,CAACE,OAAO,CAACG,EAAE,GAAGL,MAAM,CAACE,OAAO,GAAGE,QAAQ;MACtE,CAAC,CAAC;IAEJ;MACE,OAAOL,KAAK;EAAC;AAEnB,CAAC;AAED,IAAMQ,SAAS,GAAG,SAAZA,SAAS,CAAGC,QAAQ,EAAI;EAC5B;IAAA,6BAAO,WAAOC,KAAK,EAAK;MACtB,IAAMC,QAAQ,SAAUd,KAAK,CAACe,GAAG,CAAId,GAAG,WAAMY,KAAK,CAAG;MAGtDD,QAAQ,CAAC;QAACP,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEQ,QAAQ,CAACE,IAAI,CAACC;MAAM,CAAC,CAAC;IAClE,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC;AAED,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAGN,QAAQ,EAAI;EACzB;IAAA,8BAAO,WAAOH,EAAE,EAAEU,OAAO,EAAEC,QAAQ,EAAI;MAGnCR,QAAQ,CAAC;QAAEP,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAE;UAACG,EAAE,EAACA,EAAE;UAAEU,OAAO,EAAEA;QAAO;MAAC,CAAC,CAAC;IAIzE,CAAC;IAAA;MAAA;IAAA;EAAA;AAEH,CAAC;AAqBM,yBAA4BrB,iBAAiB,CAClDI,YAAY,EACZ;IAACS,SAAS,EAATA,SAAS;IAACO,QAAQ,EAARA;EAAQ,CAAC,EAEpB,EAAE,CACD;EALWG,OAAO,sBAAPA,OAAO;EAAEC,QAAQ,sBAARA,QAAQ;AAK3B"},"metadata":{},"sourceType":"module"}