{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport omdb from \"../api/omdb\";\nexport default (function () {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    results = _useState2[0],\n    setResults = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errorMessage = _useState4[0],\n    setErrorMessage = _useState4[1];\n  var searchApi = function () {\n    var _ref = _asyncToGenerator(function* (searchTerm) {\n      try {\n        var response = yield omdb.get(\"\", {\n          params: {\n            limit: 50,\n            s: searchTerm\n          }\n        });\n        setResults(response.data.Search);\n      } catch (err) {\n        setErrorMessage(\"Something went wrong\");\n      }\n    });\n    return function searchApi(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    searchApi(\"Batman\");\n  }, []);\n  return [searchApi, results, errorMessage];\n});","map":{"version":3,"names":["useEffect","useState","omdb","results","setResults","errorMessage","setErrorMessage","searchApi","searchTerm","response","get","params","limit","s","data","Search","err"],"sources":["C:/Users/User/Documents/Internship/Training/React Native/moviesApp-React/src/hooks/useResults.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport omdb from \"../api/omdb\";\r\n\r\nexport default () =>{\r\n    const [results, setResults] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n  \r\n    const searchApi = async (searchTerm) => {\r\n      try {\r\n        const response = await omdb.get(\"\", {\r\n          params: {\r\n            limit: 50,\r\n            s: searchTerm\r\n          },\r\n        });\r\n        setResults(response.data.Search); //RAML object\r\n      } catch (err) {\r\n        setErrorMessage(\"Something went wrong\");\r\n      }\r\n    };\r\n    useEffect(() => {\r\n      searchApi(\"Batman\");\r\n    }, []);\r\n\r\n    return [searchApi, results, errorMessage]\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI;AAEX,gBAAe,YAAK;EAChB,gBAA8BD,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnCE,OAAO;IAAEC,UAAU;EAC1B,iBAAwCH,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA7CI,YAAY;IAAEC,eAAe;EAEpC,IAAMC,SAAS;IAAA,6BAAG,WAAOC,UAAU,EAAK;MACtC,IAAI;QACF,IAAMC,QAAQ,SAASP,IAAI,CAACQ,GAAG,CAAC,EAAE,EAAE;UAClCC,MAAM,EAAE;YACNC,KAAK,EAAE,EAAE;YACTC,CAAC,EAAEL;UACL;QACF,CAAC,CAAC;QACFJ,UAAU,CAACK,QAAQ,CAACK,IAAI,CAACC,MAAM,CAAC;MAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZV,eAAe,CAAC,sBAAsB,CAAC;MACzC;IACF,CAAC;IAAA,gBAZKC,SAAS;MAAA;IAAA;EAAA,GAYd;EACDP,SAAS,CAAC,YAAM;IACdO,SAAS,CAAC,QAAQ,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACA,SAAS,EAAEJ,OAAO,EAAEE,YAAY,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"module"}